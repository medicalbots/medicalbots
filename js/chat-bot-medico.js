document.addEventListener("DOMContentLoaded", () => {
    // Elementos del chat embebido
    const chatMessages = document.getElementById("chatMessages");
    const chatText = document.getElementById("chatText");
    const sendChat = document.getElementById("sendChat");

    // üëâ Configuraci√≥n de Gemini
    const url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";
    const apiKey = "AIzaSyBm8KlZhYwu2I-BC6phjQM7HbAKBGaQ9Ik"; // ‚ö†Ô∏è solo pruebas

    // Prompt fijo para la IA
    const systemPrompt = `Act√∫a como un experto en salud y bienestar. 
A partir de ahora, responde √∫nicamente sobre temas relacionados con medicina, s√≠ntomas de enfermedades, h√°bitos de alimentaci√≥n saludables, rutinas de ejercicio f√≠sico, prevenci√≥n de enfermedades y consejos para mejorar la calidad de vida. 
No hables de otros temas que no est√©n directamente relacionados con la salud. 
S√© claro, preciso, basado en evidencia cient√≠fica actual y responde en un m√°ximo de 100 palabras. 
Si se mencionan temas fuera del √°mbito m√©dico, redirige la conversaci√≥n hacia el bienestar f√≠sico o mental. 
Las respuestas deben ser precisas y no exceder 100 palabras.`;

    // üîπ Funci√≥n para limpiar y dar formato a las respuestas
    function formatResponse(text) {
        return text
            // negritas con **texto**
            .replace(/\*\*(.*?)\*\*/g, "<b>$1</b>")
            // negritas con *texto*
            .replace(/\*(.*?)\*/g, "<b>$1</b>")
            // saltos de l√≠nea seguros
            .replace(/\n/g, "<br>");
    }

    // Mostrar mensajes
    function addMessage(text, sender) {
        const div = document.createElement("div");
        div.classList.add("message", sender);
        if (sender === "bot") {
            div.innerHTML = formatResponse(text); // permite negritas
        } else {
            div.textContent = text; // usuario normal
        }
        chatMessages.appendChild(div);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Enviar mensaje a Gemini
    async function sendMessage() {
        const text = chatText.value.trim();
        if (!text) return;
        addMessage(text, "user");
        chatText.value = "";
        addMessage("‚è≥ Pensando...", "bot");
        try {
            const response = await fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-goog-api-key": apiKey
                },
                body: JSON.stringify({
                    contents: [
                        {
                            role: "user",
                            parts: [{ text: systemPrompt }]
                        },
                        {
                            role: "user",
                            parts: [{ text }]
                        }
                    ]
                })
            });
            const data = await response.json();
            const botReply = data.candidates?.[0]?.content?.parts?.[0]?.text || "‚ùå Error en la respuesta.";
            chatMessages.lastChild.innerHTML = formatResponse(botReply);
        } catch (error) {
            chatMessages.lastChild.textContent = "‚ö†Ô∏è No se pudo conectar con la IA.";
            console.error(error);
        }
    }

    sendChat.addEventListener("click", sendMessage);
    chatText.addEventListener("keypress", (e) => {
        if (e.key === "Enter") sendMessage();
    });

    // FAQ: enviar pregunta al hacer click en bot√≥n
    document.querySelectorAll('.faq-grid button').forEach(btn => {
        btn.addEventListener('click', () => {
            chatText.value = btn.textContent;
            sendMessage();
        });
    });

    // Abrir / cerrar chat flotante en lobby
    const chatToggle = document.getElementById("chatToggle");
    const chatWindow = document.getElementById("chatWindow");
    const closeChat = document.getElementById("closeChat");
    if (chatToggle && chatWindow && closeChat) {
        chatWindow.style.display = "none";
        chatToggle.addEventListener("click", () => {
            chatWindow.style.display = "flex";
        });
        closeChat.addEventListener("click", () => {
            chatWindow.style.display = "none";
        });
    }
});